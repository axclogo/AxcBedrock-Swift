//
//  AxcLogInfoTarget.swift
//  AxcBedrock
//
//  Created by ËµµÊñ∞ on 2023/2/16.
//

import Foundation

// MARK: - [AxcLogInfoTarget]

/// ÂèØ‰ª•ÊîØÊåÅÂ∑•ÂÖ∑Á±ªÂØπË±°‰ΩøÁî®ÁöÑÊó•ÂøóÂçèËÆÆ
public protocol AxcLogInfoTarget: NSObjectProtocol {
    /// ÂîØ‰∏ÄÊ†áËØÜÁ¨¶ÔºåÁî®‰∫éÂå∫ÂàÜÂ§ö‰∏™Êó•Âøó‰ª£ÁêÜ
    var logIdentifier: String { get }

    /// Êó•ÂøóÂâçÁºÄ
    /// Â¶ÇÔºöAxcBedrockLib
    var logPrefix: String { get }

    /// Êó•ÂøóÁ±ªÂûã
    /// Â¶Ç Êï∞ÊçÆÂ∫ìÊó•Âøó„ÄÅÂçï‰æãÊó•Âøó„ÄÅÊ®°ÂùóÊó•ÂøóÁ≠â
    var logType: String { get }

    /// Êó•ÂøóÊó∂Èó¥Êà≥Ê†∑Âºè
    var logDateFormat: String { get }
}

// MARK: - ÈªòËÆ§ÂÆûÁé∞

public extension AxcLogInfoTarget {
    var logIdentifier: String {
        return "\(Self.self)"
    }

    var logType: String {
        return ""
    }

    var logDateFormat: String {
        return "HH:mm:ss"
    }
}

// MARK: - ‰ª£ÁêÜËÆæÁΩÆ

public extension AxcLogInfoTarget {
    /// Ëé∑ÂèñÊó•Âøó‰ª£ÁêÜ
    var logDelegate: AxcLogInfoDelegate? {
        guard let weakDelegateObj = _weakDelegateObj,
              let delegate = weakDelegateObj.object as? AxcLogInfoDelegate else { return nil }
        return delegate
    }

    /// ËÆæÁΩÆ‰ª£ÁêÜÔºåÂ∑≤ÂÅöÂº±ÂºïÁî®Â§ÑÁêÜ
    func set(logDelegate: AxcLogInfoDelegate) {
        _weakDelegateObj = .init(logDelegate)
    }
}

// MARK: - Êó•ÂøóËæìÂá∫

public extension AxcLogInfoTarget {
    /// Êó•ÂøóËæìÂá∫
    /// - Parameters:
    ///   - logLevel: Êó•ÂøóÁ≠âÁ∫ß
    ///   - logType: Êó•ÂøóÁ±ªÂûãÔºåÂ¶Ç‚ÄúÊï∞ÊçÆÂ∫ìÊó•Âøó‚Äù„ÄÅ‚ÄúË∑ØÁî±Êó•Âøó‚ÄùÁ≠â
    ///   - items: ÊâìÂç∞ÁöÑÂÖÉÁ¥†
    /// Â¶ÇÔºöAxcBedrockLib[Ê®°ÂùóÊó•Âøó](2023.02.16)‚û°Ô∏èËøôÈáåÊòØÊó•ÂøóÂÜÖÂÆπ"
    func log(_ items: Any...,
             logLevel: AxcEnum.LogLevel = .info) {
        let logPerfix: String = _createLogPrefix(logLevel: logLevel)
        let logContent: String = "\(logPerfix)\(items)"
        logDelegate?.logOutput(logObj: self, logLevel: logLevel, logContent: logContent)
    }

    /// Ê°ÜÊû∂ÂÜÖÈÉ®‰ΩøÁî®ÁöÑÊäõÂá∫Ëá¥ÂëΩÂºÇÂ∏∏
    /// debugÂºÄÂèëÁéØÂ¢É‰∏ã‰ºöÂ¥©Ê∫ÉÊèêÁ§∫‰ΩøÁî®‰∏çËßÑËåÉÔºåÁ∫ø‰∏äÁéØÂ¢ÉÂèØ‰ª•ËÆ©Á∫øÁ®ãÁù°Áú†‰∏çÂ¥©Ê∫É
    /// - Parameter debugMsg:
    /// - Returns: Never
    /// Â¶ÇÔºöAxcBedrockLib[Ê®°ÂùóÊó•Âøó](2023.02.16)‚û°Ô∏è‚ùå‚ùå‚ùåËøôÈáåÊòØÊó•ÂøóÂÜÖÂÆπ"
    func fatalLog(_ items: Any...,
                  printCount: Int = 12,
                  isNoDebugSleep: Bool = true) -> Never {
        let logPerfix: String = _createLogPrefix(logLevel: .error)
        let logContent: String = "\(logPerfix)‚ùå‚ùå‚ùå\(items)"
        logDelegate?.fatalErrorEvent(logObj: self, content: logContent, isNoDebugSleep: isNoDebugSleep)
        #if DEBUG
        for _ in 0 ..< printCount {
            print(logContent)
        }
        return fatalError(logContent)
        #else
        if isNoDebugSleep {
            sleep(.max)
        }
        return fatalError(logContent)
        #endif
    }
}

// MARK: - ÁßÅÊúâ

fileprivate var k_weakDelegateObj = "k_fileprivate.AxcBedrock.weakDelegateObj"

fileprivate extension AxcLogInfoTarget {
    /// Ëé∑ÂèñÁªü‰∏ÄÁöÑÊó•ÂøóÂâçÁºÄ
    func _createLogPrefix(logLevel: AxcEnum.LogLevel?) -> String {
        var logPrefix: String = logPrefix
        if let logLevel {
            switch logLevel {
            case .info: logPrefix.append("[\(logType)üîñ]")
            case .warning: logPrefix.append("[\(logType)‚ö†Ô∏è]")
            case .error: logPrefix.append("[\(logType)‚ùå]")
            }
        } else {
            logPrefix.append("[\(logType)]")
        }
        let date = Date()
        let formatter = DateFormatter()
        formatter.dateFormat = logDateFormat
        let dateContent = formatter.string(from: date)
        logPrefix.append("(\(dateContent))‚û°Ô∏è")
        return logPrefix
    }

    /// Áî®‰∫éÂ≠òÂÇ®Âº±ÂºïÁî®‰ª£ÁêÜÂØπË±°
    var _weakDelegateObj: AxcWeakObj<AnyObject>? {
        set { AxcRuntime.Set(object: self, key: &k_weakDelegateObj, value: newValue) }
        get { return AxcRuntime.GetObject(self, key: &k_weakDelegateObj) }
    }
}
